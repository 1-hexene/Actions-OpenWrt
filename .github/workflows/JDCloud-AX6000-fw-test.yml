#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
###############手动修改##############
name: JDCloud-AX6000-fw-test

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      MAC_ORDER:
        description: 'Use the original MAC address order'
        required: true
        default: true
        type: boolean
      WA_FW:
        description: 'Choice mt_wifi firmware'
        required: true
        default: 'mt7986-fw-20230808'
        type: choice
        options:
        - no-new-fw
        - mt7986-fw-20221208
        - mt7986-fw-jdc
        - mt7986-fw-20230421
        - mt7986-fw-20230808
        - mt7986-fw-20231024
      WO_FW:
        description: 'Choice warp firmware'
        required: true
        default: 'mt7986-fw-20230808'
        type: choice
        options:
        - no-new-fw
        - mt7986-fw-20221208
        - mt7986-fw-jdc
        - mt7986-fw-20230421
        - mt7986-fw-20230808
        - mt7986-fw-20231024
      GSW:
        description: 'Use GSW switch driver (non-DSA)'
        required: true
        default: false
        type: boolean
      APP_MTK:
        description: 'Use luci-app-mtk wifi config'
        required: true
        default: false
        type: boolean
      NO_DOCKERMAN:
        description: 'Not build luci-app-dockerman'
        required: true
        default: false
        type: boolean
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
#  schedule:
#    - cron: 0 16 * * *

env:
  ###############手动修改##############
  OPENWRT_NAME: hanwckf
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: JDCloud-AX6000/.mtwifi-cfg.config
  DIY_P1_SH: JDCloud-AX6000/diy-part1.sh
  DIY_P2_SH: JDCloud-AX6000/diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    permissions:
      contents: write
    
    steps:
    - name: 检查项目分支
      uses: actions/checkout@main
      
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 清理磁盘空间(Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # when set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: false
        dotnet: false
        haskell: false
        large-packages: false
        swap-storage: false
        
    - name: 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 加载feeds.conf.default & DIY_P1_SH
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 更新 & 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 加载config & DIY_P2_SH
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: 使用原厂MAC地址顺序
      if: inputs.MAC_ORDER == 'true'
      run: |
        cd openwrt
        ## 调换lan、wan的MAC地址
        sed -i '/jdcloud,re-cp-03)/{n; s/wan_mac=$(mmc_get_mac_binary factory 0x2a)/wan_mac=$(mmc_get_mac_binary factory 0x24)/; n; s/lan_mac=$(mmc_get_mac_binary factory 0x24)/lan_mac=$(mmc_get_mac_binary factory 0x2A)/}' target/linux/mediatek/mt7986/base-files/etc/board.d/02_network
        ## 创建一个辅助文件。文件内容是写入MAC地址到dat文件，固定wifi MAC地址
        echo -e "\t\tlocal wifi0_mac=\"\$(mmc_get_mac_binary factory 0x04)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi0_mac/;b;}; \\\$aMacAddress=\$wifi0_mac\" /etc/wireless/mediatek/mt7986-ax6000.dbdc.b0.dat
        \t\tlocal wifi1_mac=\"\$(macaddr_setbit_la \$wifi0_mac)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi1_mac/;b;}; \\\$aMacAddress=\$wifi1_mac\" /etc/wireless/mediatek/mt7986-ax6000.dbdc.b1.dat" > temp_insert.txt
        ## 将文本内容写入02_network
        sed -i '/mediatek_setup_macs()/,/\};/ {/jdcloud,re-cp-03)/ {n;n;n;r temp_insert.txt
        }}' target/linux/mediatek/mt7986/base-files/etc/board.d/02_network
        
    - name: 使用指定无线firmware
      run: |
        cd openwrt
        if [ ${{ inputs.WA_FW }} == 'no-new-fw' ]; then
                sed -i '/CONFIG_MTK_MT7986_NEW_FW=y/d' .config
                echo "mt_wifi: nono"
        else
                sed -i 's/^MT7986_FW_DIR := mt7986-fw.*/MT7986_FW_DIR := ${{inputs.WA_FW}}/g' package/mtk/drivers/mt_wifi/Makefile
                echo "mt_wifi: yes"
        fi
        if [ ${{ inputs.WA_FW }} == 'no-new-fw' ]; then
                sed -i '/CONFIG_WARP_NEW_FW=y/d' .config
                echo "warp: nono"
        else
                sed -i 's/^MT7986_NEW_WOFW_DIR := mt7986-fw.*/MT7986_NEW_WOFW_DIR := ${{inputs.WO_FW}}/g' package/mtk/drivers/warp/Makefile
                echo "warp: yes"
        fi
        echo "mt_wifi: ${{ github.event.inputs.WA_FW }}"
        echo "mt_wifi: ${{ inputs.WA_FW }}"
        echo "mt_wifi: ${{ github.event.inputs.WO_FW }}"
        echo "mt_wifi: ${{ inputs.WO_FW }}"
        
    - name: 使用GSW交换机驱动（非DSA）
      if: github.event.inputs.GSW == 'true'
      run: |
        cp JDCloud-AX6000/mt7986a-gsw-jdcloud-re-cp-03.dts openwrt/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7986a-jdcloud-re-cp-03.dts
        cd openwrt
        sed -i '/jdcloud,re-cp-03)/ {n; /lan1 lan2 lan3 lan4/ {s/lan1 lan2 lan3 lan4/eth0/; a\
        \t\tucidef_add_switch "switch0" "1:lan" "2:lan" "3:lan" "4:lan" "6u@eth0"
        }}' target/linux/mediatek/mt7986/base-files/etc/board.d/02_network

    - name: 使用luci-app-mtk无线配置
      if: github.event.inputs.APP_MTK == 'true'
      run: |
        cd openwrt
        sed -i 's/CONFIG_PACKAGE_luci-app-mtwifi-cfg=y/CONFIG_PACKAGE_luci-app-mtk=y/g' .config
        sed -i 's/CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y/CONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y/g' .config
        sed -i 's/CONFIG_PACKAGE_mtwifi-cfg=y/CONFIG_PACKAGE_wifi-profile=y/g' .config
        sed -i 's/CONFIG_PACKAGE_lua-cjson=y/CONFIG_WIFI_NORMAL_SETTING=y/g' .config
        
    - name: 取消编译dockerman
      if: github.event.inputs.NO_DOCKERMAN == 'true'
      run: |
        cd openwrt
        sed -i '/CONFIG_PACKAGE_luci-app-dockerman=y/d' .config
        
    - name: SSH链接管理
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
   
